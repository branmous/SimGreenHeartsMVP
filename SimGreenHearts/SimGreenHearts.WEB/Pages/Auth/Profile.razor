@page "/profile"
@using System.Security.Claims;

@inject IRepository repository
@inject NavigationManager navigationManager

<AuthorizeView>
    <Authorized>

        <!-- Team Start -->

        <div class="text-center mx-auto wow fadeInUp" data-wow-delay="0.1s" style="max-width: 500px;">
            <p class="fs-5 fw-bold text-primary">@role</p>
            <h1 class="display-5 mb-5">Team Members</h1>
        </div>
        <div class="row g-4">
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
            </div>
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.1s">
                <div class="team-item rounded">

                    @if (!string.IsNullOrEmpty(photoUser))
                    {
                        <img class="img-fluid" src="@photoUser" alt="">
                    }

                    <div class="team-text">
                        <h4 class="mb-0">@name @lastName</h4>
                        <p class="text-primary">@document</p>
                        <div class="team-social d-flex">
                            <a class="btn btn-square rounded-circle me-2" href=""><i class="fab fa-facebook-f"></i></a>
                            <a class="btn btn-square rounded-circle me-2" href=""><i class="fab fa-twitter"></i></a>
                            <a class="btn btn-square rounded-circle me-2" href=""><i class="fab fa-instagram"></i></a>
                        </div>
                    </div>

                </div>

            </div>
            <div class="col-lg-4 col-md-6 wow fadeInUp" data-wow-delay="0.5s">
            </div>
        </div>
        <!-- Team End -->
    </Authorized>
    <NotAuthorized>
        <p>No estas autorizado</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private string? photoUser;
    private string? name;
    private string? lastName;
    private string? role;
    private string? document;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    protected async override Task OnParametersSetAsync()
    {
        var authenticationState = await authenticationStateTask;
        var claims = authenticationState.User.Claims.ToList();
        var photoClaim = claims.FirstOrDefault(x => x.Type == "Photo");

        if (photoClaim is not null)
        {
            photoUser = photoClaim.Value;
        }

        role = claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)!.Value;
        name = claims.FirstOrDefault(x => x.Type == "FirstName")!.Value;
        document = claims.FirstOrDefault(x => x.Type == "Document")!.Value;
        lastName = claims.FirstOrDefault(x => x.Type == "LastName")!.Value;
    }
}
