@page "/devices"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject ToastService toastService

<div class="mb-2">


    <a class="btn btn-primary" href="javascript:void(0)" @onclick=@(() => OpenModalCreateAsync())><Icon Name="IconName.HouseAdd" /> Nuevo Dispositivo </a>

</div>
<Grid @ref="grid" TItem="DeviceListDTO" class="table table-hover table-bordered table-striped"
      DataProvider="DevicesDataProvider" AllowFiltering="true" Responsive="true" AllowPaging="true" PageSize="20">
    <GridColumn TItem="DeviceListDTO" HeaderText="Id" PropertyName="Id">
        @context.Id
    </GridColumn>
    <GridColumn TItem="DeviceListDTO" HeaderText="Estado" PropertyName="Status" StringComparison="StringComparison.Ordinal">
        @context.Status
    </GridColumn>
    <GridColumn TItem="DeviceListDTO" HeaderText="Estado de Conexión" PropertyName="ConnectionState" StringComparison="StringComparison.Ordinal">
        @context.ConnectionState
    </GridColumn>
    <GridColumn TItem="DeviceListDTO" HeaderText="Estado de conexión Hora de actualización" PropertyName="ConnectionStateUpdatedTime">
        @context.ConnectionStateUpdatedTime!.Value.ToString("yyyy-MM-dd HH:mm:ss")
    </GridColumn>
    <GridColumn TItem="DeviceListDTO" HeaderText="estado Hora de actualización" PropertyName="StatusUpdatedTime">
        @context.StatusUpdatedTime!.Value.ToString("yyyy-MM-dd HH:mm:ss")
    </GridColumn>
    <GridColumn TItem="DeviceListDTO" HeaderText="Última hora de actividad" PropertyName="LastActivityTime">
        @context.LastActivityTime!.Value.ToString("yyyy-MM-dd HH:mm:ss")
    </GridColumn>
</Grid>

<Modal @ref="modal" Title="Modal title">
    <BodyTemplate>

    </BodyTemplate>
</Modal>


@code {
    private List<DeviceListDTO> devices;
    private Modal modal = default!;
    private CreateDeviceDTO device = new();
    private Grid<DeviceListDTO> grid = default!;

    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    protected override async Task OnInitializedAsync()
    {
        grid = new Grid<DeviceListDTO>();
        Layout!.Title = "Dispositivos";
        Layout!.Breadcrumbs = new List<string>() { "Inicio", "Páginas", "Dispositivos" };
        await GetDevices();
    }

    private async Task<GridDataProviderResult<DeviceListDTO>> DevicesDataProvider(GridDataProviderRequest<DeviceListDTO> request)
    {
        if (devices is null)
        {
            devices = await GetDevices();
        }

        return await Task.FromResult(request.ApplyTo(devices));
    }

    public async Task<List<DeviceListDTO>> GetDevices()
    {
        var response = await repository.GetAsync<List<DeviceListDTO>>("/gateway/devices/iothub-xm-dev");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            toastService.Notify(new(ToastType.Danger, message!));
            return new();
        }

        return response.Response!;
    }

    private async Task OpenModalCreateAsync()
    {
        device = new();
        var parameters = new Dictionary<string, object>();
        parameters.Add("CreateDeviceDTO", device);
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create(this, CreateAsync));
        parameters.Add("OnCancel", EventCallback.Factory.Create(this, OnHideModalClick));
        await modal.ShowAsync<DeviceForm>(title: "Crear Dispositivo", parameters);
    }

    private async Task CreateAsync()
    {
        var response = await repository.PostAsync<CreateDeviceDTO, DeviceListDTO>("/gateway/Devices/iothub-xm-dev", device);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            toastService.Notify(new(ToastType.Danger, message!));
            await OnHideModalClick();
            return;
        }

        await OnHideModalClick();
        toastService.Notify(new(ToastType.Success, $"Se agrego el dispositivo. Fecha: {DateTime.Now}"));
        await RefreshGrid();
    }

    private async Task RefreshGrid()
    {
        device = new();
        devices = await GetDevices();
        await grid.RefreshDataAsync();
        await grid.ResetPageNumber();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }

}
