@page "/events"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject ToastService toastService

<div class="mb-2">
    <a class="btn btn-primary" href="/events/types"><Icon Name="IconName.FileRuled" /> Lista de tipo de eventos </a>

    <a class="btn btn-primary" href="javascript:void(0)" @onclick=@(() => OpenModalCreateAsync())>
        <Icon Name="IconName.CalendarPlus" /> Nuevo evento
    </a>

</div>

<Grid @ref="grid" TItem="EventListDTO" class="table table-hover table-bordered table-striped"
      DataProvider="EventsDataProvider" AllowFiltering="false" Responsive="true" AllowPaging="true" PageSize="5">
    <GridColumn TItem="EventListDTO" HeaderText="Id" PropertyName="Id">
        @context.Id
    </GridColumn>
    <GridColumn TItem="EventListDTO" HeaderText="Tipo de Evento" PropertyName="EventType!.Description" StringComparison="StringComparison.Ordinal">
        @context.EventType!.Description
    </GridColumn>
    <GridColumn TItem="EventListDTO" HeaderText="Fecha de creación" PropertyName="CreatedDate">
        @context.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss")
    </GridColumn>
    <GridColumn TItem="EventListDTO" HeaderText="Usuario" PropertyName="UserFullName">
        @context.UserFullName
    </GridColumn>
    <GridColumn TItem="EventListDTO" HeaderText="Observación" PropertyName="Observation">
        @context.Observation
    </GridColumn>
</Grid>

<Modal @ref="modal" Title="Modal title">
    <BodyTemplate>

    </BodyTemplate>
</Modal>

@code {
    private List<EventListDTO> events;
    private Modal modal = default!;
    private EventDTO eventDTO = new();
    private Grid<EventListDTO> grid = default!;


    [CascadingParameter]
    public MainLayout? Layout { get; set; }

    protected override void OnInitialized()
    {
        grid = new Grid<EventListDTO>();
        Layout!.Title = "Eventos";
        Layout!.Breadcrumbs = new List<string>() { "Inicio", "Páginas", "Eventos" };
    }

    private async Task<GridDataProviderResult<EventListDTO>> EventsDataProvider(GridDataProviderRequest<EventListDTO> request)
    {
        if (events is null)
            events = await GetEvents();

        return await Task.FromResult(request.ApplyTo(events));
    }

    private async Task OpenModalCreateAsync()
    {
        eventDTO = new();
        var parameters = new Dictionary<string, object>();
        parameters.Add("EventDTO", eventDTO);
        parameters.Add("OnValidSubmit", EventCallback.Factory.Create(this, CreateAsync));
        parameters.Add("OnCancel", EventCallback.Factory.Create(this, OnHideModalClick));
        await modal.ShowAsync<EventForm>(title: "Crear Evento", parameters);
    }

    private async Task<List<EventListDTO>> GetEvents()
    {
        var response = await repository.GetAsync<List<EventListDTO>>("/gateway/events");
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            toastService.Notify(new(ToastType.Danger, message!));
            return new List<EventListDTO>();
        }

        return response.Response!;
    }

    private async Task CreateAsync()
    {
        var response = await repository.PostAsync<EventDTO, Event>("/gateway/events", eventDTO);
        if (response.Error)
        {
            var message = await response.GetErrorMessageAsync();
            toastService.Notify(new(ToastType.Danger, message!));
            await OnHideModalClick();
            return;
        }

        await OnHideModalClick();
        toastService.Notify(new(ToastType.Success, $"Se agrego el evento correctamente. Fecha: {DateTime.Now}"));
        await RefreshGrid();
    }

    private async Task RefreshGrid()
    {
        eventDTO = new();
        events = await GetEvents();
        await grid.RefreshDataAsync();
        await grid.ResetPageNumber();
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
}
